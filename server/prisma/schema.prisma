// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  username  String
  email     String        @unique
  password  String
  avatar    String        @default("https://res.cloudinary.com/dzifzjy5a/image/upload/v1730063602/d6jgofrttwkmincxynqh.jpg")
  role      Role
  quizzes   Quiz[]        @relation("QuizCreator")
  attempts  QuizAttempt[] @relation("UserAttempts")
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Quiz {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  quiz_type   String
  creatorId   String        @db.ObjectId
  creator     User          @relation("QuizCreator", fields: [creatorId], references: [id])
  questions   Question[]    @relation("QuizQuestions")
  attempts    QuizAttempt[] @relation("QuizAttempts")
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Question {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  quizId    String       @db.ObjectId
  quiz      Quiz         @relation("QuizQuestions", fields: [quizId], references: [id])
  text      String
  type      QuestionType
  options   String[]
  answer    Int
  responses Response[]   @relation("QuestionResponses") // No `fields` or `references` here
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model QuizAttempt {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  quizId      String     @db.ObjectId
  quiz        Quiz       @relation("QuizAttempts", fields: [quizId], references: [id])
  userId      String     @db.ObjectId
  user        User       @relation("UserAttempts", fields: [userId], references: [id])
  responses   Response[]
  score       Int        @default(0)
  completed   Boolean    @default(false)
  attemptedAt DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Response {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  attemptId      String      @db.ObjectId
  attempt        QuizAttempt @relation(fields: [attemptId], references: [id])
  questionId     String      @db.ObjectId
  question       Question    @relation("QuestionResponses", fields: [questionId], references: [id])
  selectedOption Int?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

enum Role {
  USER
  CREATOR
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
}
